the_count = [1, 2, 3, 4, 5]
fruits = ['apples', 'oranges', 'pears', 'apricots']
change = [1, 'pennies', 2, 'dimes', 3, 'quarters']

for number in the_count:
    print("This is count %d" % number)

for fruit in fruits:
    print("A fruit of type: %s" % fruit)

# we have to use %r since we do not know what's in it
for i in change:
    print ("I got %r" % i)

#we can also build lists, first start with an empty one
elements = []

#then use the range function to do 0 to 5 counts
# range() function generates a list of numbers, which is generally used to iterate over with for loops. There's many use cases.
# Often you will want to use this when you want to perform an action X number of times, where you may or may not care about the index.
# Other times you may want to iterate over a list (or another iterable object), while being able to have the index available.

# - range(stop), stop: Number of integers (whole numbers) to generate, starting from zero. eg. range(3) == [0, 1, 2].
# - range([start], stop[, step]), start: Starting number of the sequence, stop: Generate numbers up to, but not including this number, step: Difference between each number in the sequence

# range() (and Python in general) is 0-index based, meaning list indexes start at 0, not 1. eg. The syntax to access the first element of a list is mylist[0].
# Therefore the last integer generated by range() is up to, but not including, stop. For example range(0, 5) generates integers from 0 up to, but not including, 5.
for i in range(0, 6):
    print ("Adding %d to the list." % i)
    #append is a function that lists Understand
    elements.append(i)

#The append() method appends an element to the end of the list.

for i in elements:
    print ("Element was: %d" % i)
